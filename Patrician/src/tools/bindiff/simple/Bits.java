package tools.bindiff.simple;

import java.io.UnsupportedEncodingException;

/**
 * Created on 23/02/15.
 *
 * @author ptasha
 */
public class Bits {
    public static String toBites(String string) {
        String bites = "";
        int b = 0;
        boolean parsed = false;
        for (char c : string.toCharArray()) {
            if (c==' '||c=='|') {
                if (parsed) {
                    bites += toBites(b);
                    b = 0;
                    parsed = false;
                }
            } else {
                b <<= 4;
                b |= Integer.parseInt("" + c, 16);
                parsed = true;
            }
        }
        if (parsed) {
            bites += toBites(b);
        }
        return bites;
    }

    public static String toBites(int b) {
        String bb = "";
        for (int i=1; i<256; i<<=1) {
            bb+=(b&i)>0?'1':'0';
        }
        bb+=' ';
        return bb;
    }

    public static void main(String[] args) throws UnsupportedEncodingException {
        // MEAT
        System.out.println(toBites("40  0 80")); // 1
        System.out.println(toBites("e0 94 80")); // 2
        System.out.println(toBites("c0  0 80")); // 3
        System.out.println(toBites(" 0  1 80"));  // 4
        System.out.println();
        System.out.println(toBites("c0 3f 80")); // 255
        System.out.println(toBites("48 c0 80")); // 256
        System.out.println(toBites("40 80 80")); // 257
        System.out.println(toBites("80 80 80")); // 258
        System.out.println();
        System.out.println(toBites("e8 16  0")); // 512
        System.out.println(toBites("80 c0 2d")); // 514
        System.out.println(toBites("c8 c0 80")); // 768
        System.out.println(toBites("80 80 81")); // 770
        System.out.println();
        System.out.println(toBites("c0  0  | 80 80")); // 3
        System.out.println(toBites("e0 94  | 80 5b")); // 2
        System.out.println(toBites("e0 94  |  0 5c")); // 2
        System.out.println(toBites("e0 94  |  0 5b")); // 2
        System.out.println();
        System.out.println(toBites("38 6e  |  5 4c")); // 2
        System.out.println(toBites("38 6e  |  5 4c")); // 2
        System.out.println();
        System.out.println(toBites(" d 40  8 c1 80")); // 1024
        System.out.println(toBites(" d 40 c8 c0 80")); // 768
        System.out.println(toBites(" d 40 48 c0 80")); // 256
        System.out.println(toBites("4d  0 80 c0 94")); // 256

        // 8 8 16
        System.out.println(toBites("dc  0"));
        System.out.println(toBites("b8  1"));
        System.out.println(toBites("94  2"));
        System.out.println(toBites("70  3"));
        System.out.println(toBites("4c  4"));

        System.out.println(toBites("41 43 c1 3d 3e  | 28 4c c8 40  | 30 c1 42 c0  | 84 11  e 13  | 38 1c 4c 28  |  1 31  1 c5  | c4  4  c  3  | 13 48 3c 4c  | 38 21 31 c1"));
        System.out.println(toBites("21 43 c1 3d 3c  | 28 4c c0 40  | 30 a1 42 c0  |  4 11  e 13  | 36 1c 4c 20  |  1 31 e1 c4  | c4 84  b  3  | 13 46 3c 4c  | 30 21 31 a1"));
        System.out.println(toBites("e1 9c be 7f ff  | f7 e4  0 c6  | 94  a  1 13  | 44 38 4c d8  | 70 30 81  4  | c4 84 13 13  | 13 2e  c 4c  | 18 f1 30 c1  | 84 c4 84 12"));
        System.out.println(toBites("21 43 c1 bd 13  | 30 a6 54  8  | 98 20 c2 61  | c2 86 83  9  | 24 20 26 9c  | 98 98 70 61  | 60 c2 88 87  |  9 26 24 26  | 94 88 98 c0"));
        System.out.println(toBites("c1 83 c2 3d 93  | 30 10 4c a8  | 10 30 41 84  | c3 84  d  7  | 13 48 40 4c  | 38 31 31 e1  | c2 c0 84 11  |  f 13 4c 48  | 4c 28 11 31"));
        System.out.println(toBites("21  3 40 80  7  | 85  9 18  8  | 26 54  8 98  | 20 c2 61 c2  | 86 83  9 24  | 20 26 9c 98  | 98 70 61 60  | c2 88 87  9  | 26 24 26 94"));
        System.out.println(toBites("21 43 c1 3d 14  |  0  4 60 20  | 98 50 21 60  | 82  8 87  9  | 1b  e 26 90  | 80 98 70 62  | 62 c2 85 81  |  9 23 1e 26  | 98 90 98 50"));
        System.out.println(toBites("e1 9c be 7f ff  | 3c 28 e4  0  |  6 82  9 15  |  2 26 88 70  | 98 b0 e1 60  |  2  9 88  9  | 27 26 26 5c  | 18 98 30 e2  | 61 82  9 89"));
        System.out.println(toBites("e1 3f c4 83 42  |  e 60 20 98  | 50 21 60 82  |  8 87  9 1b  |  e 26 90 80  | 98 70 62 62  | c2 85 81  9  | 23 1e 26 98  | 90 98 50 22"));
        System.out.println(toBites("c1 df 7f 80  7  | 85 1c c0 40  | 30 a1 42 c0  |  4 11  e 13  | 36 1c 4c 20  |  1 31 e1 c4  | c4 84  b  3  | 13 46 3c 4c  | 30 21 31 a1"));
        System.out.println(toBites("e1 9f bf 7f ff  | 3c 28 e4  0  |  6 82  9 15  |  2 26 88 70  | 98 b0 e1 60  |  2  9 88  9  | 27 26 26 5c  | 18 98 30 e2  | 61 82  9 89"));
        System.out.println(toBites("e1 9c be 7f ff  | c4 d5 4f 40  | b7 3f 61 9d  | ff  4 6f f1  | 13 ca e1 4f  | e0 f6 3e 21  | 1b fb 84 74  | fc 13 f6 c1  | 4f d0 d6 3e"));
        System.out.println(toBites("e1 9c be 7f ff  | c2 d5 4f 38  | b7 3f 41 9d  | ff 84 6e f1  | 13 c8 e1 4f  | d8 f6 3e  1  | 1b fb  4 74  | fc 13 f4 c1  | 4f c8 d6 3e"));

        // 1000 0 01011000 0 10100000 1 110111100            0 11111000  0 01010000 1 1001000    0 10011000 0 00100000 1 1001000 0 01101000 0 10000000 1 1001000 0 11000100 0 01110000 1 1001000 0 00111000 0 11100000 1 1001000 0 10100100 0 00001000 1 1001000 0 00010100 0 11001000 1 1001000 0 00011000 0 11000000 1 1001000 0 00100100 0 11110000 1 1001000 0 11100100 0 01001000 1 1001000 0 011
        // 1000 0 10011000 0 10100000 1 110111100            0 01111000  0 01010000 1 1001000    0 00011000 0 00100000 1 1001000 0 10101000 0 10000000 1 1001000 0 01000100 0 01110000 1 1001000 0 11011000 0 11100000 1 1001000 0 00100100 0 00001000 1 1001000 0 11100100 0 11001000 1 1001000 0 11101000 0 11000000 1 1001000 0 11000100 0 11110000 1 1001000 0 01100100 0 01001000 1 1001000 0 101
        // 1000 0 11100111 0 01011111 0 11111111  0 11111111 1 110111100            1 0011100000 0 00011000 1 1001010            0 101010000 10000000 11001000 00100010 00011100 00110010 00011011 00001110 00001100 10000001 00100000 00100011 00100001 11001000 11001000 11001000 01110100 00110000 00110010 00011000 10001111 00001100 10000011 00100001 00100011 00100001 01001000
        // 1000 0 10011000 0 10100000 1 110111101                                   1 1001000    0 00011000 1 1001010            0 101010 00010000 00011001 00000100 01000011 10000110 01000011 01100001 11000001 10010000 00100100 00000100 01100100 00111001 00011001 00011001 00001110 10000110 00000110 01000011 00010001 11100001 10010000 01100100 00100100 01100100 00101001 00010001 00011001 00000011
        // 1000 0 01111000 0 01010000 1 110111100            1 1001001                           0 00011000 0 00100000 1 1001000 0 10101 00001000 00001100 10000010 00100001 11000011 00100001 10110000 11100000 11001000 00010010 00000010 00110010 00011100 10001100 10001100 10000111 01000011 00000011 00100001 10001000 11110000 11001000 00110010 00010010 00110010 00010100 10001000 10001100
        // 1000 0 10011000 0 00000000 1 000000               0 01111000  0 01010000 1 1001000    0 00011000 0 00100000 1 1001000 0 10101000 0 // 10000 00011001 00000100 01000011 10000110 01000011 01100001 11000001 10010000 00100100 00000100 01100100 00111001 00011001 00011001 00001110 10000110 00000110 01000011 00010001 11100001 10010000 01100100 00100100 01100100 00101001
        // 1000 0 10011000 0 10100000 1 110111100            0 01111000  0 00000000 1 000000     0 00011000 0 00100000 1 1001000 0 10101000 0 // 100 00000110 01000001 00010000 11100001 10010000 11011000 01110000 01100100 00001001 00000001 00011001 00001110 01000110 01000110 01000011 10100001 10000001 10010000 11000100 01111000 01100100 00011001 00001001 00011001 00001010
        // 1000 0 11100111 0 01011111 0 11111111  0 11111111 0 01111000  0 01010000 1 0011100000 0 00011000 0 00100000 1 1001000 0 10101000 0 // 1000000 01100100 00010001 00001110 00011001 00001101 10000111 00000110 01000000 10010000 00010001 10010000 11100100 01100100 01100100 00111010 00011000 00011001 00001100 01000111 10000110 01000001 10010000 10010001
        // 1000 0 11111111 1 000010                          0 01111000  0 01010000 1 0011100000 0 000110 00000100 00011001 00001010 10000100 00000110 01000001 00010000 11100001 10010000 11011000 01110000 01100100 00001001 00000001 00011001 00001110 01000110 01000110 01000011 10100001 10000001 10010000 11000100 01111000 01100100 00011001 00001001 00011001 00001010 01000100
        // 1000 0 01111111 0 11111111 1 000000               0 01111000  0 01010000 1 0011100000 0 00011 00000010 00001100 10000101 01000010 00000011 00100000 10001000 01110000 11001000 01101100 00111000 00110010 00000100 10000000 10001100 10000111 00100011 00100011 00100001 11010000 11000000 11001000 01100010 00111100 00110010 00001100 10000100 10001100 10000101
        // 1000 0 11111111 0 01111111 0 11111111  0 11111111 0 01111000  0 01010000 1 0011100000 0 00 01100000 01000001 10010000 10101000 01000000 01100100 00010001 00001110 00011001 00001101 10000111 00000110 01000000 10010000 00010001 10010000 11100100 01100100 01100100 00111010 00011000 00011001 00001100 01000111 10000110 01000001 10010000 10010001
        // 1000 0 11100111 0 01011111 0 11111111  0 11111111 0 01000111  0 10101111 1 1001000    0 00010111 0 11011111 1 1001000 0 11010111 0 01111111 1 1001000 0 01111011 0 10001111 1 1001000 0 10100111 0 00011111 1 10010 00000111 01101111 01111100 10000100 11011000 11011111 00100001 00101110 00111111 11001000 01101111 10000011 11110010 00001011 01101011 01111100
        // 1000 0 11100111 0 01011111 0 11111111  0 11111111 0 10000111  0 10101111 1 1001000    0 11100111 0 11011111 1 1001000 0 01010111 0 01111111 1 1001000 0 10111011 0 10001111 1 1001000 0 00100111 0 00011111 1 10010 00011011 01101111 01111100 10000000 11011000 11011111 00100000 00101110 00111111 11001000 00101111 10000011 11110010 00010011 01101011 01111100

        System.out.println();
        System.out.println(toBites("21  0 40 60 7a  |  6  0  4 10  |  0  8 5c 7d  | 10 30 76 f1  |  3 40 60 fa  | 1f 40 3b 98  |  0 c4 60  2  | 98 84  9 f0  | 14 2e ce f4"));
        System.out.println(toBites("21  0 40 60 9a  |  6 26 10  0  |  8 5c fd 18  | bb f8  1 20  | 30 fd  f a0  | 1d 4c  0 62  | 30  1 4c c2  |  4 78  a 17  | 67 7a 90  1"));
        System.out.println(toBites("21  0 40 60 fa  | 90 86 80  1  |  0  1  4  0  |  2  a  0  4  | 18  0  8 64  | f9 34 fd  f  | a0 1d 4c  0  | 4a 1b 30  9  | 13 e0 29 5c"));
        System.out.println(toBites("21  0 40 60 fa  | 31 66  0 40  |  0  1 80 80  |  2  0  1  6  |  0  2 59 7e  |  1  8 4c 9f  | 41 3b 98  0  | 94 36 60 12  | 26 c0 53 b8"));
        System.out.println(toBites("21  0 40 60 fa  | 64  0 40  0  |  1 80 80  2  |  0  1  6  0  |  2 59 3e 4e  | 9f 41 3b 98  |  0 94 36 60  | 12 26 c0 53  | b8 38 d3 83"));
        System.out.println(toBites("21  0 40 60 fa  | 88  0 40 40  |  1 80  0  3  |  0 81 2c 9f  | a7 8f a0 1d  | 4c  0 4a 1b  | 30  9 13 e0  | 29 5c 9c e9  | 41  6 10 98"));
        System.out.println(toBites("21  0 40 60 fa  | ac  0 40 80  |  1 80 40 96  | ff 61 fa  4  | da c1  4 a0  | b4  1 93 30  |  1 9e c2 c5  | 99 1e 64  0  | 81 e9 7f c8"));
        System.out.println(toBites("21  0 40 60 fa  | 1f 18  0  8  | 64 f9 5f a6  |  f a0 1d 4c  |  0 4a 1b 30  |  9 13 e0 29  | 5c 9c e9 41  |  6 10 98 fe  | 87 2c 1f aa"));
        System.out.println(toBites("21  0 40 60 fa  | 2f c6 b2 fc  | 37  0  2 d3  |  3 ed 60  2  | 10 83  9 60  | 12 26 c0 53  | b8 38 d3 83  |  c 20 30 fd  |  f 59 3e 54"));
        System.out.println(toBites("21  0 40 60 fa  | ff 1d  3  0  |  2 a0 1d 4c  |  0 62 30  1  | 4c c2  4 78  |  a 17 67 7a  | 90  1  4 a6  | ff 21 cb 87  | ea cb fe a1"));

        // 1000 0 10000000 0 00000000 0 00000000 0 00000000 0 10000000 0 00000000 0 00000000 0 00000000 0 10000000 0 00000000 0 00000000 0 00000000 0 10000000 0 00000000 0 00000000 0 00000000 0 10000000 0
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              110                              0 11000000 0 00000000 1 000000              0 00100000 0 00000000 1 000000 1 110101011 1 11 000001 0 00 00001100 01101110 10001111 11000000 00000010 00000110 01011111 11111000 00000010 11011100 00011001 00000000 00100011 00000110 01000000 00011001 00100001 10010000 00001111 00101000 01110100 01110011 00101111
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              001                                         0 11000000 1 1001000             0 00100000 000000 00010000 00111010 10111111 00011000 11011101 00011111 10000000 00000100 00001100 10111111 11110000 00000101 10111000 00110010 00000000 01000110 00001100 10000000 00110010 01000011 00100000 00011110 01010000 11101000 11100110 01011110 00001001 10000000
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              111 0000                                                                     1 0010110000 1 000000  0 11000000 0 00000000 1 000000 0 00100000 0 00000000 1 000000 0 10100000 0 00000000 1 000000 0 01100000 0 00000000 1 000000 1 0011010011 1 110010 1 1001011  1 111111 10000                0 00001011 0111000 00110010 00000000 01010010 11011000 00001100 10010000 11001000 00000111 10010100 00111010
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              111 1000                                                                                  1 1000110 0 11000000 0 00000000 1 000000 0 00100000 0 00000000 1 000000 0 10100000 0 00000000 1 000000 0 01100000 0 00000000 1 000000 1 0011010011 1 111010 0 00000000 1 000000 1 1001011 1 110011   0 00001011 011 100 00011001 00000000 00101001 01101100 00000110 01001000 01100100 00000011 11001010 00011101
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              111 0010                                                                                            0 11000000 0 00000000 1 000000 0 00100000 0 00000000 1 000000 0 10100000 0 00000000 1 000000 0 01100000 0 00000000 1 000000 1 0011010011 1 110001 1 1001011  1 110011                      0 00001011 011 100 00011001 00000000 00101001 01101100 00000110 01001000 01100100 00000011 11001010 00011101 00011100 11001011 11000001
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              111 0001                                                                                                                           0 00100000 0 00000000 1 000000 0 10100000 0 00000000 1 000000 0 01100000 0 00000000 1 000000 1 0011010011 1 110011 1 1001011  1 110001                      0 00001011 011 1000 00110010 00000000 01010010 11011000 00001100 10010000 11001000 00000111 10010100 00111010 00111001 10010111 10000010 01100000 00001000 00011001
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              111 0011                                                                                                                                                          0 10100000 0 00000000 1 000000 0 01100000 0 00000000 1 000000 1 0011010011 1 111111 10000 1 1001011 1 110010                 0 00001011 011 10000011 00100000 00000101 00101101 10000000 11001001 00001100 10000000 01111001 01000011 10100011 10011001 01111000 00100110 00000000 10000001 10010111 11111110 00010011
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              111 1111 10000                                                                                                                                                                                   0 01100000 0 00000000 1 000000 1 0011010011 1 111111 10100 1 1001011 1 110000                 0 00001011 011 1000 00110010 00000000 01010010 11011000 00001100 10010000 11001000 00000111 10010100 00111010 00111001 10010111 10000010 01100000 00001000 00011001 01111111 11100001 00110100 11111000 01010101
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              111 1111 01000                                                                                                                                                                                                        1 1000110 1 0011010011 1 111111 01100 0 00000000 1 000000 1 1001011 1 10 0 00001011 011 1 00000110 01000000 00001000 11000001 10010000 00000110 01001000 01100100 00000011 11001010 00011101 00011100 11001011 11000001 00110000 00000100 00001100 10111111 11110000 10011010 01111100 00101010
        // 1000 0 10000000 0 00000000 1 000000              1 1001011                                              111 1111 11111 011100 0 11000000 0 00000000 1 000000 0 00001011 0 11100000 110010 00000000 01000110 00001100 10000000 00110010 01000011 00100000 00011110 01010000 11101000 11100110 01011110 00001001 10000000 00100000 01100101 11111111 10000100 11010011 11100001 01010111 11010011 01111111 10000101

        System.out.println(); //00010111
        System.out.println(toBites("68 40  | 60 c0  4  4  |  2  0 44 28  | c0 a0 41  0  |  8  f 24 10  | 48 60 60 81  | 82  3  e 2a  | 5c b0 40 21"));
        System.out.println(toBites("41  0  |  8"));
        System.out.println(toBites(0x41));

    }
}
